export const config = {
    runtime: 'edge',
    matcher: ['/', '/delivery', '/collab', '/contact'],
};

const BOT_USER_AGENTS = [
    'bot',
    'crawler',
    'spider',
    'facebookexternalhit',
    'twitterbot',
    'telegrambot',
    'whatsapp',
    'linkedinbot',
    'discordbot',
    'googlebot',
    'bingbot',
    'yandexbot',
    'slackbot',
    'applebot',
    'baiduspider',
    'duckduckbot',
    'facebot',
    'embedly',
    'pinterest',
    'slurp',
    'vkShare',
];

// –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ middleware
const STATIC_EXTENSIONS = ['.ico', '.jpg', '.jpeg', '.png', '.gif', '.svg', '.css', '.js', '.json'];

export default function middleware(request) {
    try {
        const url = new URL(request.url);

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        if (STATIC_EXTENSIONS.some(ext => url.pathname.endsWith(ext))) {
            return new Response(null, { status: 200 });
        }

        const userAgent = request.headers.get('user-agent') || '';
        const isBotRequest = BOT_USER_AGENTS.some(bot => userAgent.toLowerCase().includes(bot.toLowerCase()));

        // üîΩ –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–†–û–ü–£–°–ö–ê–ï–ú –í–°–ï–• –ë–û–¢–û–í –ë–ï–ó –û–ë–†–ê–ë–û–¢–ö–ò
        if (isBotRequest) {
            return new Response(null, { status: 200 }); // Bot? –ü—Ä–æ–ø—É—Å–∫–∞–µ–º!
        }

        // üîΩ (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û) –ï—Å–ª–∏ —É –≤–∞—Å –±—ã–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–Ω–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∑–¥–µ—Å—å
        // –ù–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ç.–¥.

        return new Response(null, { status: 200 });
    } catch (error) {
        return new Response(null, { status: 200 });
    }
}
