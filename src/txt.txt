/ HTML шаблоны прямо в коде
const HTML_TEMPLATES = {
    '/': `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Главная страница</title>
    <meta name="description" content="Описание главной страницы">
    <meta property="og:title" content="Главная страница">
    <meta property="og:description" content="Описание главной страницы">
</head>
<body>
    <div id="root">
        <h1>Главная страница</h1>
        <p>Содержание главной страницы</p>
    </div>
</body>
</html>
  `,
    '/delivery': `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Доставка</title>
    <meta name="description" content="Условия доставки и оплаты">
    <meta property="og:title" content="Доставка">
    <meta property="og:description" content="Условия доставки и оплаты">
</head>
<body>
    <div id="root">
        <h1>Доставка</h1>
        <p>Условия доставки и оплаты</p>
    </div>
</body>
</html>
  `,
    '/collab': `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Сотрудничество</title>
    <meta name="description" content="Условия сотрудничества">
    <meta property="og:title" content="Сотрудничество">
    <meta property="og:description" content="Условия сотрудничества с нами">
</head>
<body>
    <div id="root">
        <h1>Сотрудничество</h1>
        <p>Условия сотрудничества с нами</p>
    </div>
</body>
</html>
  `,
    '/contact': `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Контакты</title>
    <meta name="description" content="Наши контактные данные">
    <meta property="og:title" content="Контакты">
    <meta property="og:description" content="Наши контактные данные">
</head>
<body>
    <div id="root">
        <h1>Контакты</h1>
        <p>Наши контактные данные</p>
    </div>
</body>
</html>
  `,
};

module.exports = async (req, res) => {
    try {
        const { pathname = '/' } = req.query;
        const html = HTML_TEMPLATES[pathname] || HTML_TEMPLATES['/'];

        res.setHeader('Content-Type', 'text/html; charset=utf-8');
        res.setHeader('Cache-Control', 'public, max-age=3600');
        res.status(200).send(html);
    } catch (error) {
        console.error('Render bot error:', error);
        res.status(500).send('Error generating page');
    }
};


{
    "routes": [
        {
            "src": "/api/render-bot",
            "dest": "/api/render-bot.js"
        },
        {
            "src": "/(.*)",
            "dest": "/index.html"
        }
    ]
}

export const config = {
    runtime: 'edge',
    matcher: ['/', '/delivery', '/collab', '/contact'],
};

// Список ботов для проверки (вместо is-bot библиотеки)
const BOT_USER_AGENTS = [
    'bot',
    'crawler',
    'spider',
    'facebookexternalhit',
    'twitterbot',
    'telegrambot',
    'whatsapp',
    'linkedinbot',
    'discordbot',
    'googlebot',
    'bingbot',
    'yandexbot',
    'slackbot',
    'applebot',
    'baiduspider',
    'duckduckbot',
    'facebot',
    'embedly',
    'pinterest',
    'slurp',
    'vkShare',
];

function isBot(userAgent) {
    if (!userAgent) return false;
    const agent = userAgent.toLowerCase();
    return BOT_USER_AGENTS.some(bot => agent.includes(bot));
}

export default function middleware(request) {
    try {
        const userAgent = request.headers.get('user-agent') || '';
        const isBotRequest = isBot(userAgent);
        const url = new URL(request.url);

        if (isBotRequest) {
            console.log('Bot detected:', url.pathname);
            return Response.rewrite(new URL(`/api/render-bot?pathname=${url.pathname}`, request.url));
        }

        return new Response(null, { status: 200 });
    } catch (error) {
        console.error('Middleware error:', error);
        return new Response(null, { status: 200 });
    }
}